<?php

namespace app\modules\v1\controllers;

use Yii;

class MedicalsController extends \yii\rest\ActiveController
{
    public $modelClass = 'app\modules\v1\models\Users';
    public $usersBodyClass = 'app\modules\v1\models\UsersBodyInfo';
    public $medicalHistoryClass = 'app\modules\v1\models\MedicalHistory';
    public $medicalInjuredCodesBegClass = 'app\modules\v1\models\MedicalInjuredCodesBeg';
    public $medicalInjuredCodesMidClass = 'app\modules\v1\models\MedicalInjuredCodesMid';
    public $medicalInjuredCodesEndClass = 'app\modules\v1\models\MedicalInjuredCodesEnd';
    public $medicalDiagnosisCodesClass = 'app\modules\v1\models\MedicalDiagnosisCodes';

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['authenticator'] = [
            'class' => \sizeg\jwt\JwtHttpBearerAuth::class,
            'optional' => [ // the action list in here does not need JWT authentication
            ],
        ];

        return $behaviors;
    }

    public function actions()
    {
        $action = parent::actions(); // TODO: Change the autogenerated stub
        unset($action['index']);
        unset($action['create']);
        unset($action['update']);
        unset($action['delete']);
    }

    public function actionIndex()
    {
        $request = Yii::$app->request;
        $response = Yii::$app->response;
        $schema = 'Bearer';

        $authHeader = $request->getHeaders()->get('Authorization');
        if ($authHeader !== null && preg_match('/^' . $schema . '\s+(.*?)$/', $authHeader, $matches)) {
            $token = $matches[1];
        } else {
            $token = null;
        }

        // Find user base on access token
        $user = $this->modelClass::findIdentityByAccessToken($token);

        if (is_null($user)) {
            $response->statusCode = 403;
            $response->data = "";
        } else {
            $role = $user['role'];

            if ($role === 1) {
                // Get all user records
                $users = $this->modelClass::findAllRecords();
                // Get the user's basic shoes infomation
                $medicalHistory = $this->medicalHistoryClass::findAllRecordsJoinWithParams($users);

                if (is_null($medicalHistory)) {
                    $response->statusCode = 404;
                    $response->data = [
                        'message' => '無紀錄',
                    ];
                } else {
                    $response->statusCode = 200;
                    $response->data = $medicalHistory;
                }
            } else {
                $response->statusCode = 403;
                $response->data = "";
            }
        }
        return $response;
    }

    public function actionFindOne($id)
    {
        $response = Yii::$app->response;

        $identity = $this->usersBodyClass::findIdentity($id);
        if (is_null($identity)) {
            $response->statusCode = 404;
            $response->data = [
                'message' => '無此單號',
            ];
        } else {
            $medicalHistory = $this->medicalHistoryClass::findOneRecord($id);

            if (is_null($medicalHistory)) {
                $response->statusCode = 204;
                $response->data = [
                    'message' => '無紀錄',
                ];
            } else {
                $injured_codes_beg = substr($medicalHistory['event_1'], 0, 1);
                $injured_codes_mid = substr($medicalHistory['event_1'], 1, 3);
                $injured_codes_end = substr($medicalHistory['event_1'], 4, 1);
                $diagnosis_codes = $medicalHistory['diagnosis_1'];

                $medicalInjuredCodesBeg = $this->medicalInjuredCodesBegClass::findAllRecords();
                foreach ($medicalInjuredCodesBeg as $row) {
                    foreach ($row as $value) {
                        if ($row["code"] == $injured_codes_beg) {
                            $injured_codes_beg = $row['name'];
                            break;
                        }
                    }
                }
                $medicalInjuredCodesMid = $this->medicalInjuredCodesMidClass::findAllRecords();
                foreach ($medicalInjuredCodesMid as $row) {
                    foreach ($row as $value) {
                        if ($row["code"] == $injured_codes_mid) {
                            $injured_codes_mid = $row['name'];
                            break;
                        }
                    }
                }
                $medicalInjuredCodesEnd = $this->medicalInjuredCodesEndClass::findAllRecords();
                foreach ($medicalInjuredCodesEnd as $row) {
                    foreach ($row as $value) {
                        if ($row["code"] == $injured_codes_end) {
                            $injured_codes_end = $row['name'];
                            break;
                        }
                    }
                }
                $medicalDiagnosisCodes = $this->medicalDiagnosisCodesClass::findAllRecords();
                foreach ($medicalDiagnosisCodes as $row) {
                    foreach ($row as $value) {
                        if ($row["code"] == $diagnosis_codes) {
                            $diagnosis_codes = $row['name'];
                            break;
                        }
                    }
                }
                $medicalHistory['event_1'] = [
                    $injured_codes_beg,
                    $injured_codes_mid,
                    $injured_codes_end,
                ];
                $medicalHistory['diagnosis_1'] = $diagnosis_codes;

                $response->statusCode = 200;
                $response->data = $medicalHistory;
            }
        }
        return $response;
    }

    public function actionFindOneByMhId($id)
    {
        $response = Yii::$app->response;

        $medicalHistory = $this->medicalHistoryClass::findOneRecordByMhid($id);

        if (is_null($medicalHistory)) {
            $response->statusCode = 204;
            $response->data = [
                'message' => '無紀錄',
            ];
        } else {
            $injured_codes_beg = substr($medicalHistory['event_1'], 0, 1);
            $injured_codes_mid = substr($medicalHistory['event_1'], 1, 3);
            $injured_codes_end = substr($medicalHistory['event_1'], 4, 1);
            $diagnosis_codes = $medicalHistory['diagnosis_1'];

            $medicalInjuredCodesBeg = $this->medicalInjuredCodesBegClass::findAllRecords();
            foreach ($medicalInjuredCodesBeg as $row) {
                foreach ($row as $value) {
                    if ($row["code"] == $injured_codes_beg) {
                        $injured_codes_beg = $row['name'];
                        break;
                    }
                }
            }
            $medicalInjuredCodesMid = $this->medicalInjuredCodesMidClass::findAllRecords();
            foreach ($medicalInjuredCodesMid as $row) {
                foreach ($row as $value) {
                    if ($row["code"] == $injured_codes_mid) {
                        $injured_codes_mid = $row['name'];
                        break;
                    }
                }
            }
            $medicalInjuredCodesEnd = $this->medicalInjuredCodesEndClass::findAllRecords();
            foreach ($medicalInjuredCodesEnd as $row) {
                foreach ($row as $value) {
                    if ($row["code"] == $injured_codes_end) {
                        $injured_codes_end = $row['name'];
                        break;
                    }
                }
            }
            $medicalDiagnosisCodes = $this->medicalDiagnosisCodesClass::findAllRecords();
            foreach ($medicalDiagnosisCodes as $row) {
                foreach ($row as $value) {
                    if ($row["code"] == $diagnosis_codes) {
                        $diagnosis_codes = $row['name'];
                        break;
                    }
                }
            }
            $medicalHistory['event_1'] = [
                $injured_codes_beg,
                $injured_codes_mid,
                $injured_codes_end,
            ];
            $medicalHistory['diagnosis_1'] = $diagnosis_codes;

            $response->statusCode = 200;
            $response->data = $medicalHistory;
        }
        return $response;
    }

    public function actionCreate($id)
    {
        $request = Yii::$app->request;
        $response = Yii::$app->response;
        $schema = 'Bearer';
        $params = $request->post();

        $authHeader = $request->getHeaders()->get('Authorization');
        if ($authHeader !== null && preg_match('/^' . $schema . '\s+(.*?)$/', $authHeader, $matches)) {
            $token = $matches[1];
        } else {
            $token = null;
        }

        // Find user base on access token
        $user = $this->modelClass::findIdentityByAccessToken($token);

        if (is_null($user)) {
            $response->statusCode = 403;
            $response->data = [
                "message" => "禁止存取，請先至首頁建立基本資料．",
            ];
        } else {
            if (isset($params['event_1']) && isset($params['diagnosis_1']) && sizeof($params['event_1']) == 3 && isset($params['at_plan']) && isset($params['treatment'])) {
                $injured_codes_beg = $params["event_1"][0];
                $injured_codes_mid = $params["event_1"][1];
                $injured_codes_end = $params["event_1"][2];
                $diagnosis_codes = $params["diagnosis_1"];

                $medicalInjuredCodesBeg = $this->medicalInjuredCodesBegClass::findAllRecords();
                foreach ($medicalInjuredCodesBeg as $row) {
                    foreach ($row as $value) {
                        if ($row["name"] == $injured_codes_beg) {
                            $injured_codes_beg = $row['code'];
                            break;
                        }
                    }
                }
                $medicalInjuredCodesMid = $this->medicalInjuredCodesMidClass::findAllRecords();
                if ($injured_codes_mid == "其他部位") {
                    $injured_codes_mid = "000";
                } else {
                    foreach ($medicalInjuredCodesMid as $row) {
                        foreach ($row as $value) {
                            if ($row["name"] == $injured_codes_mid) {
                                $injured_codes_mid = $row['code'];
                                break;
                            }
                        }
                    }
                }
                $medicalInjuredCodesEnd = $this->medicalInjuredCodesEndClass::findAllRecords();
                foreach ($medicalInjuredCodesEnd as $row) {
                    foreach ($row as $value) {
                        if ($row["name"] == $injured_codes_end) {
                            $injured_codes_end = $row['code'];
                            break;
                        }
                    }
                }
                $medicalDiagnosisCodes = $this->medicalDiagnosisCodesClass::findAllRecords();
                if ($diagnosis_codes == "其他部位") {
                    $diagnosis_codes = "000";
                } else {
                    foreach ($medicalDiagnosisCodes as $row) {
                        foreach ($row as $value) {
                            if ($row["name"] == $diagnosis_codes) {
                                $diagnosis_codes = $row['code'];
                                break;
                            }
                        }
                    }
                }

                if (isset($params['event_1'])) {
                    $params['event_1'] = [
                        $injured_codes_beg,
                        $injured_codes_mid,
                        $injured_codes_end,
                    ];
                }
                if (isset($params['diagnosis_1'])) {
                    $params['diagnosis_1'] = $diagnosis_codes;
                }
                // 新增資料（table medical_history)
                $medicalHistory = $this->medicalHistoryClass::createData($id, $params);
                if (is_null($medicalHistory)) {
                    $response->statusCode = 400;
                    $response->data = [
                        'message' => '資料格式有誤，新增失敗(medical_history)．',
                    ];
                } else {
                    $response->statusCode = 201;
                    $response->data = "";
                }
            } else {
                $response->statusCode = 400;
                $response->data = [
                    'message' => '資料格式有誤，修改失敗(medical_history)．',
                ];
            }
        }
        return $response;
    }

    public function actionUpdate($id)
    {
        $request = Yii::$app->request;
        $response = Yii::$app->response;
        $schema = 'Bearer';
        $params = $request->post();

        $authHeader = $request->getHeaders()->get('Authorization');
        if ($authHeader !== null && preg_match('/^' . $schema . '\s+(.*?)$/', $authHeader, $matches)) {
            $token = $matches[1];
        } else {
            $token = null;
        }

        // Find user base on access token
        $user = $this->modelClass::findIdentityByAccessToken($token);
        if (is_null($user)) {
            $response->statusCode = 403;
            $response->data = [
                "message" => "禁止存取，請先至首頁建立基本資料．",
            ];
        } else {
            if (isset($params['event_1']) && isset($params['diagnosis_1']) && sizeof($params['event_1']) == 3 && isset($params['at_plan']) && isset($params['treatment'])) {
                $injured_codes_beg = $params["event_1"][0];
                $injured_codes_mid = $params["event_1"][1];
                $injured_codes_end = $params["event_1"][2];
                $diagnosis_codes = $params["diagnosis_1"];

                $medicalInjuredCodesBeg = $this->medicalInjuredCodesBegClass::findAllRecords();
                foreach ($medicalInjuredCodesBeg as $row) {
                    foreach ($row as $value) {
                        if ($row["name"] == $injured_codes_beg) {
                            $injured_codes_beg = $row['code'];
                            break;
                        }
                    }
                }
                $medicalInjuredCodesMid = $this->medicalInjuredCodesMidClass::findAllRecords();
                if ($injured_codes_mid == "其他部位") {
                    $injured_codes_mid = "000";
                } else {
                    foreach ($medicalInjuredCodesMid as $row) {
                        foreach ($row as $value) {
                            if ($row["name"] == $injured_codes_mid) {
                                $injured_codes_mid = $row['code'];
                                break;
                            }
                        }
                    }
                }
                $medicalInjuredCodesEnd = $this->medicalInjuredCodesEndClass::findAllRecords();
                foreach ($medicalInjuredCodesEnd as $row) {
                    foreach ($row as $value) {
                        if ($row["name"] == $injured_codes_end) {
                            $injured_codes_end = $row['code'];
                            break;
                        }
                    }
                }
                $medicalDiagnosisCodes = $this->medicalDiagnosisCodesClass::findAllRecords();
                if ($diagnosis_codes == "其他部位") {
                    $diagnosis_codes = "000";
                } else {
                    foreach ($medicalDiagnosisCodes as $row) {
                        foreach ($row as $value) {
                            if ($row["name"] == $diagnosis_codes) {
                                $diagnosis_codes = $row['code'];
                                break;
                            }
                        }
                    }
                }

                $params['event_1'] = [
                    $injured_codes_beg,
                    $injured_codes_mid,
                    $injured_codes_end,
                ];
                $params['diagnosis_1'] = $diagnosis_codes;

                $modUser = $this->medicalHistoryClass::updateData($id, $params);

                if (is_null($modUser)) {
                    $response->statusCode = 400;
                    $response->data = [
                        'message' => '資料修改失敗，資料格式有誤．',
                    ];
                } else {
                    $response->statusCode = 200;
                    $response->data = [
                        'message' => '修改成功．',
                        'modUser' => $modUser

                    ];
                }
            } else {
                $response->statusCode = 400;
                $response->data = [
                    'message' => '資料格式有誤，新增失敗(medical_history)．',
                ];
            }
        }
        return $response;
    }
    public function actionUpdateByMhId($id)
    {
        $request = Yii::$app->request;
        $response = Yii::$app->response;
        $params = $request->post();

        if (isset($params['event_1']) && isset($params['diagnosis_1']) && sizeof($params['event_1']) == 3 && isset($params['at_plan']) && isset($params['treatment'])) {
            $injured_codes_beg = $params["event_1"][0];
            $injured_codes_mid = $params["event_1"][1];
            $injured_codes_end = $params["event_1"][2];
            $diagnosis_codes = $params["diagnosis_1"];

            $medicalInjuredCodesBeg = $this->medicalInjuredCodesBegClass::findAllRecords();
            foreach ($medicalInjuredCodesBeg as $row) {
                foreach ($row as $value) {
                    if ($row["name"] == $injured_codes_beg) {
                        $injured_codes_beg = $row['code'];
                        break;
                    }
                }
            }
            $medicalInjuredCodesMid = $this->medicalInjuredCodesMidClass::findAllRecords();
            if ($injured_codes_mid == "其他部位") {
                $injured_codes_mid = "000";
            } else {
                foreach ($medicalInjuredCodesMid as $row) {
                    foreach ($row as $value) {
                        if ($row["name"] == $injured_codes_mid) {
                            $injured_codes_mid = $row['code'];
                            break;
                        }
                    }
                }
            }
            $medicalInjuredCodesEnd = $this->medicalInjuredCodesEndClass::findAllRecords();
            foreach ($medicalInjuredCodesEnd as $row) {
                foreach ($row as $value) {
                    if ($row["name"] == $injured_codes_end) {
                        $injured_codes_end = $row['code'];
                        break;
                    }
                }
            }
            $medicalDiagnosisCodes = $this->medicalDiagnosisCodesClass::findAllRecords();
            if ($diagnosis_codes == "其他部位") {
                $diagnosis_codes = "000";
            } else {
                foreach ($medicalDiagnosisCodes as $row) {
                    foreach ($row as $value) {
                        if ($row["name"] == $diagnosis_codes) {
                            $diagnosis_codes = $row['code'];
                            break;
                        }
                    }
                }
            }

            $params['event_1'] = [
                $injured_codes_beg,
                $injured_codes_mid,
                $injured_codes_end,
            ];
            $params['diagnosis_1'] = $diagnosis_codes;

            $modUser = $this->medicalHistoryClass::updateDataByMhId($id, $params);

            if (is_null($modUser)) {
                $response->statusCode = 400;
                $response->data = [
                    'message' => '資料修改失敗，資料格式有誤．',
                ];
            } else {
                $response->statusCode = 200;
                $response->data = [
                    'message' => '修改成功．',
                    'modUser' => $modUser

                ];
            }
        } else {
            $response->statusCode = 400;
            $response->data = [
                'message' => '資料格式有誤，新增失敗(medical_history)．',
            ];
        }
        return $response;
    }

    public function actionDelete($id)
    {
        $request = Yii::$app->request;
        $response = Yii::$app->response;
        $schema = 'Bearer';

        $authHeader = $request->getHeaders()->get('Authorization');
        if ($authHeader !== null && preg_match('/^' . $schema . '\s+(.*?)$/', $authHeader, $matches)) {
            $token = $matches[1];
        } else {
            $token = null;
        }

        // Find user base on access token
        $user = $this->modelClass::findIdentityByAccessToken($token);

        if (is_null($user)) {
            $response->statusCode = 403;
            $response->data = "";
        } else {
            $role = $user['role'];
            $identity = $this->usersBodyClass::findIdentity($id);

            if (is_null($identity)) {
                $response->statusCode = 404;
                $response->data = [
                    "message" => "無資料可刪",
                ];
            } else {
                if ($role === 1) {
                    // Staff role
                    $this->medicalHistoryClass::deleteData($id);
                    $response->statusCode = 200;
                    $response->data = [
                        'message' => '刪除成功',
                    ];
                } else {
                    // Common user role
                    if ($identity['u_id'] != $user['u_id']) {
                        $response->statusCode = 403;
                        $response->data = [
                            'message' => '無權限',
                        ];
                    } else {
                        $this->medicalHistoryClass::deleteData($id);
                        $response->statusCode = 200;
                        $response->data = [
                            'message' => '刪除成功',
                        ];
                    }
                }
            }
        }
        return $response;
    }
}
